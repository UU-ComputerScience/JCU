RESTful behavior:

/rules/stored (rules in the side-bar, which can be reused):
GET: Retrieve the list of stored rules. If no such list is available on the server, create it.
PUT: Store the list of stored rules as is currently available on the client-side.


/rules/hint
POST: Submits all current rules used in a derivation to the server, which will calculate a set of next possible rules that can be applied.

/rules/check
POST: Submits all current rules used and checks if the derivation sequence is valid.


On the client side, we're only working with strings as they are found in the .pro files. This makes the client-side significantly easier to work with. It also greatly simplifies the communication with the server.
Client-side, the rules only need to be displayed and shuffled around. The server then uses the existing parsing infrastructure to parse the text to datatypes and do prolog-foo. If the server needs to send rules back, it just Shows them and returns them as a String (potentially in a list, if the situation requires zero/one-or-more).



10:50 < __tosh> it is possible to nest views
10:51 < __tosh> you could either use a route to instantiate and render the outer view and after that instantiate and 
                add the inner view to the outer view's dom
10:52 < __tosh> or you could move instantiation and rendering of the inner view to something like the outer view's 
                initialization or render functions
10:52 < __tosh> i fear there is not really a best practice available here
10:52 < __tosh> you will need to see what works for you
10:52 < __tosh> just remember that a view is connected to a dom node and attaches its events to it
10:53 < __tosh> a common 'mistake' is to let the outer view remove the inner view's dom element which causes this 
                view to loose its events
10:54 < __tosh> but it is also a common mistake for a view to overwrite its own dom element which has the attached 
                events
10:54 < __tosh> so make sure that this does not happen and then nesting views should work quite well :)